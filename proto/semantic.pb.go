// Code generated by protoc-gen-go. DO NOT EDIT.
// source: semantic.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SemanticDescriptor_Labels int32

const (
	SemanticDescriptor_DEFAULT  SemanticDescriptor_Labels = 0
	SemanticDescriptor_ADVANCED SemanticDescriptor_Labels = 1
	// only.
	SemanticDescriptor_HIDDEN SemanticDescriptor_Labels = 2
)

var SemanticDescriptor_Labels_name = map[int32]string{
	0: "DEFAULT",
	1: "ADVANCED",
	2: "HIDDEN",
}

var SemanticDescriptor_Labels_value = map[string]int32{
	"DEFAULT":  0,
	"ADVANCED": 1,
	"HIDDEN":   2,
}

func (x SemanticDescriptor_Labels) String() string {
	return proto.EnumName(SemanticDescriptor_Labels_name, int32(x))
}

func (SemanticDescriptor_Labels) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32e5db2b9bc8653e, []int{0, 0}
}

type SemanticDescriptor struct {
	// The semantic name of the SemanticValue contained in this field.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The type of this field can be specified dynamically. This is the name of
	// the attribute to use to retrieve the SemanticValue class to be used for
	// parsing this field.
	DynamicType string `protobuf:"bytes,5,opt,name=dynamic_type,json=dynamicType,proto3" json:"dynamic_type,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// A JSON encoded default. This should be the same type as the
	// field it describes.
	Default string                      `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
	Label   []SemanticDescriptor_Labels `protobuf:"varint,3,rep,packed,name=label,proto3,enum=proto.SemanticDescriptor_Labels" json:"label,omitempty"`
	// A friendly name for this field - to be used in GUIs etc.
	FriendlyName         string   `protobuf:"bytes,4,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SemanticDescriptor) Reset()         { *m = SemanticDescriptor{} }
func (m *SemanticDescriptor) String() string { return proto.CompactTextString(m) }
func (*SemanticDescriptor) ProtoMessage()    {}
func (*SemanticDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5db2b9bc8653e, []int{0}
}

func (m *SemanticDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SemanticDescriptor.Unmarshal(m, b)
}
func (m *SemanticDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SemanticDescriptor.Marshal(b, m, deterministic)
}
func (m *SemanticDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SemanticDescriptor.Merge(m, src)
}
func (m *SemanticDescriptor) XXX_Size() int {
	return xxx_messageInfo_SemanticDescriptor.Size(m)
}
func (m *SemanticDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_SemanticDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_SemanticDescriptor proto.InternalMessageInfo

func (m *SemanticDescriptor) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SemanticDescriptor) GetDynamicType() string {
	if m != nil {
		return m.DynamicType
	}
	return ""
}

func (m *SemanticDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SemanticDescriptor) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *SemanticDescriptor) GetLabel() []SemanticDescriptor_Labels {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *SemanticDescriptor) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

type SemanticMessageDescriptor struct {
	// Describe the purpose of this protobuf.
	Description          string   `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	FriendlyName         string   `protobuf:"bytes,3,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SemanticMessageDescriptor) Reset()         { *m = SemanticMessageDescriptor{} }
func (m *SemanticMessageDescriptor) String() string { return proto.CompactTextString(m) }
func (*SemanticMessageDescriptor) ProtoMessage()    {}
func (*SemanticMessageDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_32e5db2b9bc8653e, []int{1}
}

func (m *SemanticMessageDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SemanticMessageDescriptor.Unmarshal(m, b)
}
func (m *SemanticMessageDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SemanticMessageDescriptor.Marshal(b, m, deterministic)
}
func (m *SemanticMessageDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SemanticMessageDescriptor.Merge(m, src)
}
func (m *SemanticMessageDescriptor) XXX_Size() int {
	return xxx_messageInfo_SemanticMessageDescriptor.Size(m)
}
func (m *SemanticMessageDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_SemanticMessageDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_SemanticMessageDescriptor proto.InternalMessageInfo

func (m *SemanticMessageDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SemanticMessageDescriptor) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

var E_SemType = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*SemanticDescriptor)(nil),
	Field:         51584972,
	Name:          "proto.sem_type",
	Tag:           "bytes,51584972,opt,name=sem_type",
	Filename:      "semantic.proto",
}

var E_Semantic = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*SemanticMessageDescriptor)(nil),
	Field:         51584971,
	Name:          "proto.semantic",
	Tag:           "bytes,51584971,opt,name=semantic",
	Filename:      "semantic.proto",
}

var E_Description = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         48651165,
	Name:          "proto.description",
	Tag:           "bytes,48651165,opt,name=description",
	Filename:      "semantic.proto",
}

var E_Label = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumValueOptions)(nil),
	ExtensionType: (*SemanticDescriptor_Labels)(nil),
	Field:         48651166,
	Name:          "proto.label",
	Tag:           "varint,48651166,opt,name=label,enum=proto.SemanticDescriptor_Labels",
	Filename:      "semantic.proto",
}

func init() {
	proto.RegisterEnum("proto.SemanticDescriptor_Labels", SemanticDescriptor_Labels_name, SemanticDescriptor_Labels_value)
	proto.RegisterType((*SemanticDescriptor)(nil), "proto.SemanticDescriptor")
	proto.RegisterType((*SemanticMessageDescriptor)(nil), "proto.SemanticMessageDescriptor")
	proto.RegisterExtension(E_SemType)
	proto.RegisterExtension(E_Semantic)
	proto.RegisterExtension(E_Description)
	proto.RegisterExtension(E_Label)
}

func init() { proto.RegisterFile("semantic.proto", fileDescriptor_32e5db2b9bc8653e) }

var fileDescriptor_32e5db2b9bc8653e = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x4e, 0xea, 0x40,
	0x14, 0xc7, 0x6f, 0xf9, 0x28, 0xdc, 0x53, 0x2e, 0x21, 0xb3, 0xb9, 0xc3, 0x4d, 0x6e, 0x2c, 0xb8,
	0x61, 0x55, 0x12, 0x4c, 0x5c, 0x74, 0x47, 0x6c, 0x89, 0x26, 0x88, 0x49, 0x45, 0x56, 0x26, 0x38,
	0xa5, 0x03, 0x69, 0xd2, 0x0f, 0xd2, 0x69, 0x17, 0x3c, 0x88, 0x0b, 0x17, 0xfa, 0x1a, 0x2e, 0x7d,
	0x00, 0x79, 0x28, 0xc3, 0xb4, 0x83, 0xca, 0xc4, 0x84, 0x55, 0x3b, 0xe7, 0xfc, 0xe7, 0x77, 0xce,
	0xf9, 0x9f, 0x81, 0x26, 0xa3, 0x21, 0x89, 0x52, 0x7f, 0x61, 0xac, 0x93, 0x38, 0x8d, 0x51, 0x95,
	0x7f, 0xfe, 0xe9, 0xab, 0x38, 0x5e, 0x05, 0xb4, 0xcf, 0x4f, 0x6e, 0xb6, 0xec, 0x7b, 0x94, 0x2d,
	0x12, 0x7f, 0x9d, 0xc6, 0x49, 0x2e, 0xec, 0x3e, 0x96, 0x00, 0xdd, 0x16, 0x77, 0xad, 0x7d, 0x12,
	0x21, 0xa8, 0xa4, 0x9b, 0x35, 0xc5, 0x8a, 0xae, 0xf4, 0x7e, 0x3b, 0xfc, 0x1f, 0x75, 0xa0, 0xe1,
	0x6d, 0x22, 0x12, 0xfa, 0x8b, 0x39, 0xcf, 0x55, 0x79, 0x4e, 0x2b, 0x62, 0xd3, 0x9d, 0x44, 0x07,
	0x4d, 0x54, 0xf0, 0xe3, 0x08, 0x97, 0x0a, 0xc5, 0x67, 0x08, 0x61, 0xa8, 0x79, 0x74, 0x49, 0xb2,
	0x20, 0xc5, 0x2a, 0xcf, 0x8a, 0x23, 0x3a, 0x87, 0x6a, 0x40, 0x5c, 0x1a, 0xe0, 0xb2, 0x5e, 0xee,
	0x35, 0x07, 0x7a, 0xde, 0xa0, 0x21, 0x37, 0x67, 0x8c, 0x77, 0x32, 0xe6, 0xe4, 0x72, 0x74, 0x0a,
	0x7f, 0x96, 0x89, 0x4f, 0x23, 0x2f, 0xd8, 0xcc, 0x23, 0x12, 0x52, 0x5c, 0xe1, 0xdc, 0x86, 0x08,
	0x4e, 0x48, 0x48, 0xbb, 0x7d, 0x50, 0xf3, 0x5b, 0x48, 0x83, 0x9a, 0x65, 0x8f, 0x86, 0x77, 0xe3,
	0x69, 0xeb, 0x17, 0x6a, 0x40, 0x7d, 0x68, 0xcd, 0x86, 0x93, 0x0b, 0xdb, 0x6a, 0x29, 0x08, 0x40,
	0xbd, 0xbc, 0xb2, 0x2c, 0x7b, 0xd2, 0x2a, 0x75, 0x5d, 0x68, 0x8b, 0xca, 0xd7, 0x94, 0x31, 0xb2,
	0xa2, 0x5f, 0xdc, 0x39, 0x18, 0x53, 0x91, 0xc7, 0x94, 0x9a, 0x2a, 0xcb, 0x4d, 0x99, 0x33, 0xa8,
	0x33, 0x1a, 0x72, 0x33, 0xd1, 0x7f, 0x23, 0x5f, 0x95, 0x21, 0x56, 0x65, 0x8c, 0x7c, 0x1a, 0x78,
	0x37, 0x1c, 0xc7, 0xf0, 0xf6, 0x6d, 0x8b, 0x75, 0xa5, 0xa7, 0x0d, 0xda, 0x3f, 0xda, 0xe2, 0xd4,
	0x18, 0x0d, 0x77, 0x5b, 0x30, 0x1f, 0x38, 0x97, 0xa7, 0xd1, 0x89, 0xc4, 0x2d, 0xc6, 0x11, 0xe4,
	0x77, 0x41, 0x3e, 0x34, 0x5c, 0x1a, 0xdb, 0xd9, 0x53, 0xcd, 0xd1, 0x37, 0x03, 0x50, 0x47, 0x2a,
	0x62, 0x47, 0x59, 0x38, 0x23, 0x41, 0xb6, 0x2f, 0xf3, 0xfc, 0xfa, 0xf4, 0x57, 0xb2, 0xc9, 0xbc,
	0x2f, 0x76, 0x7e, 0x0c, 0xe1, 0x25, 0x27, 0x1c, 0xff, 0x32, 0x5c, 0x95, 0xeb, 0xce, 0x3e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x34, 0xdc, 0x4a, 0xf3, 0x1d, 0x03, 0x00, 0x00,
}
