// Copyright 2011 Google Inc. All Rights Reserved
// LINT: LEGACY_NAMES

// These are the messages used in client actions.
syntax = "proto3";

import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";

package proto;

// Stores information about the GRR client itself
message ClientInformation {
   string client_name = 1;
   string client_version = 7;
   uint64 revision = 3;
   string build_time = 4;
   string client_description = 5;
  repeated string labels = 6;
}

// Ask the ListDir action to list all files in path (returns StatEntry)
message ListDirRequest {
   PathSpec pathspec = 1;

// Velociraptor does not support iterators.
//   Iterator iterator = 2;
};


// A stat() record for a given path
// Next field id: 24.
message StatEntry {
  // DEPRECATED
  //  string aff4path = 1;
   uint64 st_mode = 2 [(sem_type) = {
      type: "StatMode",
      description: "A unix file permission mode."
    }];

   uint32 st_ino = 3;
   uint32 st_dev = 4;
   uint32 st_nlink = 5;
   uint32 st_uid = 6;
   uint32 st_gid = 7;
   uint64 st_size = 8;
   uint64 st_atime = 9 [(sem_type) = {
      type: "RDFDatetimeSeconds",
      description: "Last access time."
    }];

   uint64 st_mtime = 10 [(sem_type) = {
      type: "RDFDatetimeSeconds",
      description: "Last modified time."
    }];

   uint64 st_ctime = 11 [(sem_type) = {
      type: "RDFDatetimeSeconds",
      description: "Last inode change time."
    }];

   uint32 st_blocks = 12;
   uint32 st_blksize = 13;
   uint32 st_rdev = 14;
   uint32 st_flags_osx = 21 [(sem_type) = {
           type: "StatExtFlagsOsx",
           description: "extended file attributes for Mac (set by `chflags`)",
       }];
   uint32 st_flags_linux = 22 [
    (sem_type) = {
      type: "StatExtFlagsLinux",
      description: "extended file attributes as reported by `lsattr`",
    }
  ];
   string symlink = 15;

  // These are used when mapping registry keys to the VFS
  enum RegistryType {
    option allow_alias = true;

    REG_NONE = 0x00;
    REG_SZ = 0x01;
    REG_EXPAND_SZ = 0x02;
    REG_BINARY = 0x03;
    REG_DWORD = 0x04;
    REG_DWORD_LITTLE_ENDIAN = 0x04;
    REG_DWORD_BIG_ENDIAN = 0x05;
    REG_LINK = 0x06;
    REG_MULTI_SZ = 0x07;
    REG_QWORD = 0x0B;
  }

   RegistryType registry_type = 16 [(sem_type) = {
      description: "If this is a stat of a registry value, this field "
      "contains the type of this value. The content will also be encoded "
      "in residet."
    }];

 // For very small files their data is stored in this record.
   bytes resident = 17;

  // The pathspec which the client can use to re-reach this file.
   PathSpec pathspec = 18 [(sem_type) = {
      description: "The path specification to this file on the client."
    }];

//   DataBlob registry_data = 19 [(sem_type) = {
//      description: "If this entry represents a registry value, this field will "
//     "contain that value encoded according to the correct type.";
//    }];
   uint64 st_crtime = 20 [(sem_type) = {
      type: "RDFDatetimeSeconds",
      description: "Creation time."
    }];

  message ExtAttr {
     string name = 1;
     string value = 2;
  }

  repeated ExtAttr ext_attrs = 23;
};


// A message to encode a filesystem path (maybe for raw access)
// Next field: 15
message PathSpec {
    string path = 2 [(sem_type) = {
            description: "The path passed to the Filesystem accessor. "
            "This value is interpreted by the accessor in its own way.",
        }];

    string accessor = 3 [(sem_type) = {
            description: "The accessor used to retrieve the file.",
        }];
};


// Message to carry uname information.
message Uname {
   string system = 1 [(sem_type) = {
      description: "The system platform (Windows|Darwin|Linux).",
    }];
   string node = 2 [(sem_type) = {
      description: "The hostname of this system.",
    }];
   string release = 3 [(sem_type) = {
      description: "The OS release identifier e.g. 7, OSX, debian.",
    }];
   string version = 4 [(sem_type) = {
      description: "The OS version ID e.g. 6.1.7601SP1, 10.9.2, 14.04.",
    }];
   string machine = 5 [(sem_type) = {
      description: "The system architecture e.g. AMD64, x86_64.",
    }];
   string kernel = 6 [(sem_type) = {
      description: "The kernel version string e.g. 6.1.7601, 13.1.0, 3.15-rc2.",
    }];
   string fqdn = 7 [(sem_type) = {
      description: "The system's fully qualified domain name.",
    }];

   uint64 install_date = 8 [(sem_type) = {
      type: "RDFDatetime",
      description: "When system was installed."
    }];

   string libc_ver = 9 [(sem_type) = {
      description: "The C library version",
    }];

   string architecture = 10 [(sem_type) = {
      description: "The architecture of this binary. (Note this can be "
      "different from the machine architecture in the case of a 32 bit binary "
      "running on a 64 bit system)",
    }];

   string pep425tag = 11 [(sem_type) = {
      description: "The unique signature of this python system (as defined by "
      "PEP425 tags).",
    }];
};
