// These are the messages used in client actions.
syntax = "proto3";

import "actions.proto";
import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";

package proto;


message Hash {
   bytes sha256 = 1 [(sem_type) = {
      type: "HashDigest",
      description: "SHA256 binary hash digest."
      }];
   bytes sha1 = 2 [(sem_type) = {
      type: "HashDigest",
      description: "SHA1 binary hash digest."
      }];
   bytes md5 = 3 [(sem_type) = {
      type: "HashDigest",
      description: "MD5 binary hash digest."
      }];
   bytes pecoff_sha1 = 4 [(sem_type) = {
      type: "HashDigest",
      description: "Authenticode SHA1 hash digest for signed region of PE file."
      }];

   bytes pecoff_md5 = 5 [(sem_type) = {
      type: "HashDigest",
      description: "Authenticode MD5 hash digest for signed region of PE file."
      }];

   bytes pecoff_sha256 = 7 [(sem_type) = {
      type: "HashDigest",
      description: "Authenticode SHA256 hash digest for signed region of PE file."
      }];

  repeated AuthenticodeSignedData signed_data = 6 [(sem_type) = {
      description: "Signed data which may be present in PE files.",
    }];

   uint64 num_bytes = 8 [(sem_type) = {
      description: "The number of bytes used to create the hashes in this message."
    }];
}


message AuthenticodeSignedData {
   uint64 revision = 1;
   uint64 cert_type = 2;
   bytes certificate = 3;
}


message FingerprintTuple {
  // The fingerprinting methods the fingerprinter can be asked to perform.
  // If none is given, all are applied.
  enum Type {
    FPT_GENERIC = 0;
    FPT_PE_COFF = 1;
  };
  // The hash functions that a fingerprinting method may employ.
  // If none is given, all applicable ones are used.
  enum HashType {
    MD5 = 0;
    SHA1 = 1;
    SHA256 = 2;
  };
   Type fp_type = 1;
  repeated HashType hashers = 2;
};

// Request fingerprints for a file.
message FingerprintRequest {
   PathSpec pathspec = 1;
  repeated FingerprintTuple tuples = 2;
   uint64 max_filesize = 3 [(sem_type) = {
      description: "Maximum file size to fingerprint."
    }];  // 10GiB
};

// Response data for file hashes and signature blobs.
message FingerprintResponse {
  repeated FingerprintTuple.Type matching_types = 1;
   PathSpec pathspec = 3;
   Hash hash = 4;
   uint64 bytes_read = 5 [(sem_type) = {
      description: "Total number of bytes hashed."
    }];
};


message BufferReference {
   uint64 offset = 1;
   uint64 length = 2;
   string callback = 3;
   bytes  data = 4;
   PathSpec pathspec = 6;
};
