// Code generated by protoc-gen-go. DO NOT EDIT.
// source: generic.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	_ "www.velocidex.com/golang/velociraptor/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataBlob_CompressionType int32

const (
	DataBlob_UNCOMPRESSED DataBlob_CompressionType = 0
	// Compressed using the zlib.compress() function.
	DataBlob_ZCOMPRESSION DataBlob_CompressionType = 1
)

var DataBlob_CompressionType_name = map[int32]string{
	0: "UNCOMPRESSED",
	1: "ZCOMPRESSION",
}

var DataBlob_CompressionType_value = map[string]int32{
	"UNCOMPRESSED": 0,
	"ZCOMPRESSION": 1,
}

func (x DataBlob_CompressionType) String() string {
	return proto.EnumName(DataBlob_CompressionType_name, int32(x))
}

func (DataBlob_CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4c692b03a02b431c, []int{0, 0}
}

// A generic protobuf to deliver some data
// The data can be a single value a protobuf or a list.
// Next field: 13
type DataBlob struct {
	Integer   int64             `protobuf:"varint,1,opt,name=integer,proto3" json:"integer,omitempty"`
	Data      []byte            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	String_   string            `protobuf:"bytes,3,opt,name=string,proto3" json:"string,omitempty"`
	ProtoName string            `protobuf:"bytes,4,opt,name=proto_name,json=protoName,proto3" json:"proto_name,omitempty"`
	None      string            `protobuf:"bytes,5,opt,name=none,proto3" json:"none,omitempty"`
	Boolean   bool              `protobuf:"varint,6,opt,name=boolean,proto3" json:"boolean,omitempty"`
	List      *BlobArray        `protobuf:"bytes,8,opt,name=list,proto3" json:"list,omitempty"`
	Dict      *Dict             `protobuf:"bytes,9,opt,name=dict,proto3" json:"dict,omitempty"`
	RdfValue  *EmbeddedRDFValue `protobuf:"bytes,10,opt,name=rdf_value,json=rdfValue,proto3" json:"rdf_value,omitempty"`
	Float     float32           `protobuf:"fixed32,11,opt,name=float,proto3" json:"float,omitempty"`
	Set       *BlobArray        `protobuf:"bytes,12,opt,name=set,proto3" json:"set,omitempty"`
	// How the message_list element is compressed
	Compression          DataBlob_CompressionType `protobuf:"varint,7,opt,name=compression,proto3,enum=proto.DataBlob_CompressionType" json:"compression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DataBlob) Reset()         { *m = DataBlob{} }
func (m *DataBlob) String() string { return proto.CompactTextString(m) }
func (*DataBlob) ProtoMessage()    {}
func (*DataBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c692b03a02b431c, []int{0}
}

func (m *DataBlob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataBlob.Unmarshal(m, b)
}
func (m *DataBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataBlob.Marshal(b, m, deterministic)
}
func (m *DataBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataBlob.Merge(m, src)
}
func (m *DataBlob) XXX_Size() int {
	return xxx_messageInfo_DataBlob.Size(m)
}
func (m *DataBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_DataBlob.DiscardUnknown(m)
}

var xxx_messageInfo_DataBlob proto.InternalMessageInfo

func (m *DataBlob) GetInteger() int64 {
	if m != nil {
		return m.Integer
	}
	return 0
}

func (m *DataBlob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataBlob) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *DataBlob) GetProtoName() string {
	if m != nil {
		return m.ProtoName
	}
	return ""
}

func (m *DataBlob) GetNone() string {
	if m != nil {
		return m.None
	}
	return ""
}

func (m *DataBlob) GetBoolean() bool {
	if m != nil {
		return m.Boolean
	}
	return false
}

func (m *DataBlob) GetList() *BlobArray {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *DataBlob) GetDict() *Dict {
	if m != nil {
		return m.Dict
	}
	return nil
}

func (m *DataBlob) GetRdfValue() *EmbeddedRDFValue {
	if m != nil {
		return m.RdfValue
	}
	return nil
}

func (m *DataBlob) GetFloat() float32 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *DataBlob) GetSet() *BlobArray {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *DataBlob) GetCompression() DataBlob_CompressionType {
	if m != nil {
		return m.Compression
	}
	return DataBlob_UNCOMPRESSED
}

// A generic collection of blobs
type BlobArray struct {
	Content              []*DataBlob `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BlobArray) Reset()         { *m = BlobArray{} }
func (m *BlobArray) String() string { return proto.CompactTextString(m) }
func (*BlobArray) ProtoMessage()    {}
func (*BlobArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c692b03a02b431c, []int{1}
}

func (m *BlobArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlobArray.Unmarshal(m, b)
}
func (m *BlobArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlobArray.Marshal(b, m, deterministic)
}
func (m *BlobArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobArray.Merge(m, src)
}
func (m *BlobArray) XXX_Size() int {
	return xxx_messageInfo_BlobArray.Size(m)
}
func (m *BlobArray) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobArray.DiscardUnknown(m)
}

var xxx_messageInfo_BlobArray proto.InternalMessageInfo

func (m *BlobArray) GetContent() []*DataBlob {
	if m != nil {
		return m.Content
	}
	return nil
}

// A Key Value pair
type KeyValue struct {
	K                    *DataBlob `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	V                    *DataBlob `protobuf:"bytes,2,opt,name=v,proto3" json:"v,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c692b03a02b431c, []int{2}
}

func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValue.Unmarshal(m, b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return xxx_messageInfo_KeyValue.Size(m)
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetK() *DataBlob {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *KeyValue) GetV() *DataBlob {
	if m != nil {
		return m.V
	}
	return nil
}

// A list of Key Value pairs
type Dict struct {
	Dat                  []*KeyValue `protobuf:"bytes,1,rep,name=dat,proto3" json:"dat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Dict) Reset()         { *m = Dict{} }
func (m *Dict) String() string { return proto.CompactTextString(m) }
func (*Dict) ProtoMessage()    {}
func (*Dict) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c692b03a02b431c, []int{3}
}

func (m *Dict) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dict.Unmarshal(m, b)
}
func (m *Dict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dict.Marshal(b, m, deterministic)
}
func (m *Dict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dict.Merge(m, src)
}
func (m *Dict) XXX_Size() int {
	return xxx_messageInfo_Dict.Size(m)
}
func (m *Dict) XXX_DiscardUnknown() {
	xxx_messageInfo_Dict.DiscardUnknown(m)
}

var xxx_messageInfo_Dict proto.InternalMessageInfo

func (m *Dict) GetDat() []*KeyValue {
	if m != nil {
		return m.Dat
	}
	return nil
}

// This is a way to serialize an arbitrary RDFValue.
type EmbeddedRDFValue struct {
	EmbeddedAge uint64 `protobuf:"varint,1,opt,name=embedded_age,json=embeddedAge,proto3" json:"embedded_age,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// retrieve the class for it.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmbeddedRDFValue) Reset()         { *m = EmbeddedRDFValue{} }
func (m *EmbeddedRDFValue) String() string { return proto.CompactTextString(m) }
func (*EmbeddedRDFValue) ProtoMessage()    {}
func (*EmbeddedRDFValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c692b03a02b431c, []int{4}
}

func (m *EmbeddedRDFValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmbeddedRDFValue.Unmarshal(m, b)
}
func (m *EmbeddedRDFValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmbeddedRDFValue.Marshal(b, m, deterministic)
}
func (m *EmbeddedRDFValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbeddedRDFValue.Merge(m, src)
}
func (m *EmbeddedRDFValue) XXX_Size() int {
	return xxx_messageInfo_EmbeddedRDFValue.Size(m)
}
func (m *EmbeddedRDFValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbeddedRDFValue.DiscardUnknown(m)
}

var xxx_messageInfo_EmbeddedRDFValue proto.InternalMessageInfo

func (m *EmbeddedRDFValue) GetEmbeddedAge() uint64 {
	if m != nil {
		return m.EmbeddedAge
	}
	return 0
}

func (m *EmbeddedRDFValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmbeddedRDFValue) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.DataBlob_CompressionType", DataBlob_CompressionType_name, DataBlob_CompressionType_value)
	proto.RegisterType((*DataBlob)(nil), "proto.DataBlob")
	proto.RegisterType((*BlobArray)(nil), "proto.BlobArray")
	proto.RegisterType((*KeyValue)(nil), "proto.KeyValue")
	proto.RegisterType((*Dict)(nil), "proto.Dict")
	proto.RegisterType((*EmbeddedRDFValue)(nil), "proto.EmbeddedRDFValue")
}

func init() { proto.RegisterFile("generic.proto", fileDescriptor_4c692b03a02b431c) }

var fileDescriptor_4c692b03a02b431c = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x51, 0x6f, 0xd3, 0x3c,
	0x14, 0xfd, 0xbc, 0x64, 0x5b, 0x7b, 0xd3, 0x8f, 0x55, 0x16, 0x1a, 0x06, 0x69, 0xcc, 0x8a, 0x86,
	0x08, 0x0f, 0xa4, 0xd2, 0x10, 0x3c, 0xf0, 0xd6, 0xae, 0x1b, 0x20, 0xc4, 0x06, 0xde, 0xe0, 0x81,
	0x97, 0xc9, 0x4d, 0x6e, 0xb3, 0x68, 0x89, 0x5d, 0x39, 0xa6, 0xa3, 0x3f, 0x82, 0x7f, 0xc5, 0x2f,
	0x81, 0xbf, 0x01, 0x12, 0x8a, 0x9b, 0xb0, 0xa9, 0x1a, 0x4f, 0xf1, 0xbd, 0xe7, 0xe4, 0xf8, 0x5e,
	0x9d, 0x63, 0xf8, 0x3f, 0x43, 0x85, 0x26, 0x4f, 0xe2, 0x99, 0xd1, 0x56, 0xd3, 0x75, 0xf7, 0x79,
	0xf0, 0xf2, 0xea, 0xea, 0x2a, 0x9e, 0x63, 0xa1, 0x93, 0x3c, 0xc5, 0xaf, 0x71, 0xa2, 0xcb, 0x41,
	0xa6, 0x0b, 0xa9, 0xb2, 0xc1, 0xb2, 0x69, 0xe4, 0xcc, 0x6a, 0x33, 0x70, 0xe4, 0x41, 0x85, 0xa5,
	0x54, 0xb6, 0x95, 0x08, 0x7f, 0x7b, 0xd0, 0x19, 0x4b, 0x2b, 0x47, 0x85, 0x9e, 0x50, 0x06, 0x9b,
	0xb9, 0xb2, 0x98, 0xa1, 0x61, 0x84, 0x93, 0xc8, 0x13, 0x6d, 0x49, 0x29, 0xf8, 0xa9, 0xb4, 0x92,
	0xad, 0x71, 0x12, 0xf5, 0x84, 0x3b, 0xd3, 0x6d, 0xd8, 0xa8, 0xac, 0xc9, 0x55, 0xc6, 0x3c, 0x4e,
	0xa2, 0xae, 0x68, 0x2a, 0xba, 0x03, 0xe0, 0xb4, 0xcf, 0x95, 0x2c, 0x91, 0xf9, 0x0e, 0xeb, 0xba,
	0xce, 0xb1, 0x2c, 0xb1, 0x96, 0x52, 0x5a, 0x21, 0x5b, 0x77, 0x80, 0x3b, 0xd7, 0x17, 0x4f, 0xb4,
	0x2e, 0x50, 0x2a, 0xb6, 0xc1, 0x49, 0xd4, 0x11, 0x6d, 0x49, 0xf7, 0xc0, 0x2f, 0xf2, 0xca, 0xb2,
	0x0e, 0x27, 0x51, 0xb0, 0xdf, 0x5f, 0x4e, 0x1d, 0xd7, 0xd3, 0x0e, 0x8d, 0x91, 0x0b, 0xe1, 0x50,
	0xba, 0x0b, 0x7e, 0x9a, 0x27, 0x96, 0x75, 0x1d, 0x2b, 0x68, 0x58, 0xe3, 0x3c, 0xb1, 0xc2, 0x01,
	0x34, 0x81, 0xae, 0x49, 0xa7, 0xe7, 0x73, 0x59, 0x7c, 0x41, 0x06, 0x8e, 0x75, 0xaf, 0x61, 0x1d,
	0x96, 0x13, 0x4c, 0x53, 0x4c, 0xc5, 0xf8, 0xe8, 0x53, 0x0d, 0x8f, 0x9e, 0xfe, 0xf8, 0xf5, 0xf3,
	0x3b, 0x79, 0x4c, 0x1f, 0x9d, 0x5a, 0x6d, 0x90, 0x4b, 0xc5, 0xb1, 0xa1, 0x70, 0x69, 0x26, 0xb9,
	0x35, 0xd2, 0x2c, 0x78, 0xcb, 0x8e, 0x45, 0xc7, 0xa4, 0x53, 0x77, 0xa4, 0x77, 0x61, 0x7d, 0x5a,
	0x68, 0x69, 0x59, 0xc0, 0x49, 0xb4, 0x26, 0x96, 0x05, 0x0d, 0xc1, 0xab, 0xd0, 0xb2, 0xde, 0x3f,
	0x16, 0xa8, 0x41, 0x3a, 0x84, 0x20, 0xd1, 0xe5, 0xcc, 0x60, 0x55, 0xe5, 0x5a, 0xb1, 0x4d, 0x4e,
	0xa2, 0x3b, 0xfb, 0xbb, 0xed, 0x1a, 0x8d, 0x3d, 0xf1, 0xc1, 0x35, 0xe5, 0x6c, 0x31, 0x43, 0x71,
	0xf3, 0x9f, 0xf0, 0x39, 0x6c, 0xad, 0xe0, 0xb4, 0x0f, 0xbd, 0x8f, 0xc7, 0x07, 0x27, 0xef, 0xde,
	0x8b, 0xc3, 0xd3, 0xd3, 0xc3, 0x71, 0xff, 0xbf, 0xba, 0xf3, 0xb9, 0x6d, 0xbc, 0x39, 0x39, 0xee,
	0x93, 0xf0, 0x05, 0x74, 0xff, 0xce, 0x42, 0x9f, 0xc0, 0x66, 0xa2, 0x95, 0x45, 0x65, 0x19, 0xe1,
	0x5e, 0x14, 0xec, 0x6f, 0xad, 0x8c, 0x20, 0x5a, 0x3c, 0x7c, 0x0d, 0x9d, 0xb7, 0xb8, 0x58, 0xee,
	0xbd, 0x03, 0xe4, 0xd2, 0x05, 0xe6, 0x96, 0x1f, 0xc8, 0x65, 0x0d, 0xcf, 0x5d, 0x70, 0x6e, 0x83,
	0xe7, 0xe1, 0x09, 0xf8, 0xb5, 0x51, 0xf4, 0x15, 0x78, 0xa9, 0x5c, 0xbd, 0xb8, 0xbd, 0x63, 0xb4,
	0xe7, 0x4c, 0x79, 0x48, 0xb7, 0x87, 0xea, 0x86, 0x0b, 0x97, 0xb8, 0x18, 0x38, 0x4f, 0x43, 0xbf,
	0x96, 0x14, 0xb5, 0x42, 0xf8, 0x8d, 0x40, 0x7f, 0xd5, 0x54, 0xfa, 0x01, 0x7a, 0xad, 0x8b, 0xe7,
	0x32, 0x43, 0x37, 0xae, 0x3f, 0x8a, 0x9d, 0x6a, 0x04, 0x81, 0x18, 0x1f, 0x8d, 0xa5, 0x45, 0x9b,
	0x97, 0x48, 0xef, 0x9f, 0x5d, 0x20, 0x97, 0x19, 0x72, 0x3d, 0xe5, 0xf6, 0x22, 0xaf, 0x6e, 0x78,
	0x1d, 0xb4, 0x1a, 0xc3, 0x6c, 0x19, 0xe4, 0x3a, 0xe1, 0x6b, 0x4d, 0x90, 0x9b, 0x70, 0xbb, 0x77,
	0xe2, 0x5d, 0xbf, 0x93, 0xc9, 0x86, 0x5b, 0xe5, 0xd9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6,
	0x75, 0x9a, 0xc3, 0xbd, 0x03, 0x00, 0x00,
}
