syntax = "proto3";

import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";
import "www.velocidex.com/golang/velociraptor/actions/proto/actions.proto";
import "www.velocidex.com/golang/velociraptor/actions/proto/vql.proto";
import "google/api/annotations.proto";

package proto;


// GRR uses an int for client_version which is difficult to use
// semantic versioning. We use a string instead which represents the
// commit number.
message AgentInformation {
    string version = 1;
    string name = 2;
    string build_time = 3;
}

// Describe a client. We fill in some metadata about the client but
// this is by no means exhaustive.
message ApiClient {
    string client_id = 1 [(sem_type) = {
            type: "ApiClientId",
            description: "The client id",
        }];
    AgentInformation agent_information = 2;
    Uname os_info = 3;
    uint64 first_seen_at = 6 [(sem_type) = {
            type: "RDFDatetime",
            description: "When flow was created."
        }];
    uint64 last_seen_at = 7 [(sem_type) = {
            type: "RDFDatetime",
            description: "Last time when client checked in."
        }];
    uint64 last_booted_at = 8 [(sem_type) = {
            type: "RDFDatetime",
            description: "Last boot time."
        }];
    uint64 last_clock = 9 [(sem_type) = {
            type: "RDFDatetime",
            description: "Client clocks value during latest checkin."
        }];
    uint64 last_crash_at = 10 [(sem_type) = {
            type: "RDFDatetime",
            description: "Last crash time."
        }];

    string last_ip = 16 [(sem_type) = {
            description: "The last seen remote API address"
        }];


    enum IPAddressClass {
        UNKNOWN = 0;
        INTERNAL = 1;
        EXTERNAL = 2;
        VPN = 3;
    }

    IPAddressClass last_ip_class = 17;

    repeated User users = 13;

    repeated Interface interfaces = 14;

    repeated VQLResponse info = 15;

    repeated string labels = 18;
}

message Interface {
    string mac_address = 1;
}


message SearchClientsRequest {
    uint64 offset = 1;
    uint64 limit = 2;
    string query = 3;
    bool name_only = 4;

    enum QueryType {
        VALUE = 0; // Returns all values that match query.
        KEY = 1;   // Returns all keys that match query.
    }
    QueryType type = 5;
}

message SearchClientsResponse {
    repeated ApiClient items = 1;
    repeated string names = 2 [(sem_type) = {
            description: "If name_only is specified in the request we only "
            "return the names here.",
        }];
}

message GetClientRequest {
    string client_id = 1;

    bool lightweight = 2 [(sem_type) = {
            description: "If set only collect some information.",
        }];
}

message LabelClientsRequest {
    repeated string client_ids = 1;
    repeated string labels = 2;
    string operation = 3;
}
