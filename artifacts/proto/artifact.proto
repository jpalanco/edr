syntax = "proto3";

import "www.velocidex.com/golang/velociraptor/proto/semantic.proto";

package proto;


message FieldDescriptor {
    string friendly_name = 1;
    string name = 2;
    bool repeated = 3;
    string type = 4;
    string doc = 5;
    repeated string labels = 6;
    string default = 7;

    // Same as doc field.
    string description = 8;
}

message EnumValue {
    int32 value = 1;
    string name = 2;
}


message TypeDescriptor {
    string doc = 1;
    // Same as doc field.
    string description = 9;

    repeated FieldDescriptor fields = 2;
    string name = 3;
    string friendly_name = 7;
    string kind = 4;

    // The fields are all part of a single one of structure. NOTE:
    // Currently we only support an all or nothing approach to oneof -
    // there can be at most a single oneof group within the proto and
    // it implies that all the fields belong to it.
    bool oneof = 5;

    string default = 6 [(sem_type) = {
            description: "The json encoded default value for this type."
        }];

    repeated EnumValue allowed_values = 8;
}

message Types {
    repeated TypeDescriptor items = 1;
}


message ArtifactParameter {
    option (semantic) = {
        description: "Artifacts may accept parameters which are added to the "
        "scope prior to execution. NOTE: all parameters are strings - if you "
        "need something else the query can unpack e.g. from JSON using the "
        "JSONParse() VQL function."
    };
    string name = 1;
    string default = 2;
    string description = 3;
    string type = 4;
    string friendly_name = 5;
}

message ArtifactSource {
    option (semantic) = {
        description: "Where the artifact gets its data."
    };

    string precondition = 1 [(sem_type) = {
            description: "A VQL expression to be evaluated prior to using "
            "this source."
        }];

    repeated string queries = 2 [(sem_type) = {
            description: "Queries that will run in order. Only output from "
            "the last query will be collected."
        }];
}

message Artifact {
    option (semantic) = {
        description: "An artifact wraps a VQL query in reusable, documented way."
        "Artifacts are all about collecting things not analyzing them."
    };

    string name = 1 [(sem_type) = {
            description: "The name of the artifact. Should be unique and may "
            "contain dots. A useful scheme is to break categories with dot e.g. "
            "Linux.Browsers.ChromeHistory";
        }];

    string path = 6 [(sem_type) = {
            description: "The path of this artifact in the artifact store.",
        }];

    string raw = 7 [(sem_type) = {
            description: "The raw YAML of this artifact.",
        }];

    string description = 2 [(sem_type) = {
            description: "What the artifact is trying to collect."
        }];

    string reference = 5 [(sem_type) = {
            description: "A reference for this artifact."
        }];

    repeated ArtifactParameter parameters = 3 [(sem_type) = {
            description: "Parameters to be provided to the artifact."
        }];

    repeated ArtifactSource sources = 4 [(sem_type) = {
            description: "Where the artifact gets its data."
        }];
}

message ArtifactDescriptors {
    repeated Artifact items = 1;
}